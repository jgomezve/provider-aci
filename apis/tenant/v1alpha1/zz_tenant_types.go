/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TenantObservation struct {

	// Annotation for object tenant.
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// Description for object tenant.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name alias for object tenant.
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// Relation to class monEPGPol. Cardinality - N_TO_ONE. Type - String.
	RelationFvRsTenantMonPol *string `json:"relationFvRsTenantMonPol,omitempty" tf:"relation_fv_rs_tenant_mon_pol,omitempty"`

	// Relation to class vzFilter. Cardinality - N_TO_M. Type - Set of String.
	RelationFvRsTnDenyRule []*string `json:"relationFvRsTnDenyRule,omitempty" tf:"relation_fv_rs_tn_deny_rule,omitempty"`
}

type TenantParameters struct {

	// Annotation for object tenant.
	// +kubebuilder:validation:Optional
	Annotation *string `json:"annotation,omitempty" tf:"annotation,omitempty"`

	// Description for object tenant.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Name alias for object tenant.
	// +kubebuilder:validation:Optional
	NameAlias *string `json:"nameAlias,omitempty" tf:"name_alias,omitempty"`

	// Relation to class monEPGPol. Cardinality - N_TO_ONE. Type - String.
	// +kubebuilder:validation:Optional
	RelationFvRsTenantMonPol *string `json:"relationFvRsTenantMonPol,omitempty" tf:"relation_fv_rs_tenant_mon_pol,omitempty"`

	// Relation to class vzFilter. Cardinality - N_TO_M. Type - Set of String.
	// +kubebuilder:validation:Optional
	RelationFvRsTnDenyRule []*string `json:"relationFvRsTnDenyRule,omitempty" tf:"relation_fv_rs_tn_deny_rule,omitempty"`
}

// TenantSpec defines the desired state of Tenant
type TenantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TenantParameters `json:"forProvider"`
}

// TenantStatus defines the observed state of Tenant.
type TenantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TenantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Tenant is the Schema for the Tenants API. Manages ACI Tenant
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aci}
type Tenant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TenantSpec   `json:"spec"`
	Status            TenantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TenantList contains a list of Tenants
type TenantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tenant `json:"items"`
}

// Repository type metadata.
var (
	Tenant_Kind             = "Tenant"
	Tenant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tenant_Kind}.String()
	Tenant_KindAPIVersion   = Tenant_Kind + "." + CRDGroupVersion.String()
	Tenant_GroupVersionKind = CRDGroupVersion.WithKind(Tenant_Kind)
)

func init() {
	SchemeBuilder.Register(&Tenant{}, &TenantList{})
}
